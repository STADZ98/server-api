generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String?
  picture        String?
  role           Role            @default(user)
  enabled        Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  addresses      Address[]
  carts          Cart[]          @relation("UserCarts")
  orders         Order[]         @relation("UserOrders")
  ReturnRequest  ReturnRequest[]
  repliedReviews Review[]        @relation("ReviewReply")
  reviews        Review[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  images        String
  slug          String        @unique @db.VarChar(191)
  isActive      Boolean       @default(true)
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id               Int              @id @default(autoincrement())
  name             String
  images           String
  slug             String           @unique
  isActive         Boolean          @default(true)
  categoryId       Int
  products         Product[]        @relation("ProductToSubcategory")
  subsubcategories SubSubcategory[]
  category         Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId])
}

model SubSubcategory {
  id            Int         @id @default(autoincrement())
  name          String
  slug          String      @unique @db.VarChar(191)
  images        String
  isActive      Boolean     @default(true)
  subcategoryId Int
  products      Product[]   @relation("ProductToSubSubcategory")
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([name, subcategoryId])
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  images    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id               Int              @id @default(autoincrement())
  title            String
  description      String
  price            Float
  sold             Int              @default(0)
  quantity         Int
  categoryId       Int?
  subcategoryId    Int?
  subSubcategoryId Int?
  brandId          Int?
  images           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  brand            Brand?           @relation(fields: [brandId], references: [id])
  category         Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subSubcategory   SubSubcategory?  @relation("ProductToSubSubcategory", fields: [subSubcategoryId], references: [id], onDelete: Cascade)
  subcategory      Subcategory?     @relation("ProductToSubcategory", fields: [subcategoryId], references: [id], onDelete: Cascade)
  cartItems        ProductOnCart[]
  orderItems       ProductOnOrder[]
  variants         ProductVariant[]
  ReturnProduct    ReturnProduct[]
  reviews          Review[]
}

model ProductVariant {
  id             Int              @id @default(autoincrement())
  productId      Int
  title          String?
  sku            String?          @unique
  price          Float?
  quantity       Int              @default(0)
  sold           Int              @default(0)
  attributes     Json?
  isActive       Boolean          @default(true)
  images         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductOnCart  ProductOnCart[]
  ProductOnOrder ProductOnOrder[]
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviews        Review[]
}

model Order {
  id              Int              @id @default(autoincrement())
  email           String?
  addressId       Int?
  cartTotal       Float
  trackingCarrier String?
  trackingCode    String?
  orderStatus     OrderStatus      @default(NOT_PROCESSED)
  stripePaymentId String
  paymentMethod   String?
  amount          Int
  status          PaymentStatus
  currency        String
  orderedById     Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  address         Address?         @relation(fields: [addressId], references: [id])
  orderedBy       User?            @relation("UserOrders", fields: [orderedById], references: [id])
  products        ProductOnOrder[]
  ReturnRequest   ReturnRequest[]
  reviews         Review[]
}

model ProductOnOrder {
  id        Int             @id @default(autoincrement())
  productId Int
  variantId Int?
  orderId   Int
  count     Int
  price     Float
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model ReturnRequest {
  id           Int             @id @default(autoincrement())
  orderId      Int
  userId       Int
  reason       String
  customReason String?
  status       String          @default("PENDING")
  adminNote    String?
  handledAt    DateTime?
  createdAt    DateTime        @default(now())
  products     ReturnProduct[]
  images       ReturnImage[]
  order        Order           @relation(fields: [orderId], references: [id])
  user         User            @relation(fields: [userId], references: [id])
}

model ReturnImage {
  id              Int           @id @default(autoincrement())
  returnRequestId Int
  filename        String?
  mime            String
  data            Bytes
  createdAt       DateTime      @default(now())
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)
}

model ReturnProduct {
  id              Int           @id @default(autoincrement())
  returnRequestId Int
  productId       Int
  product         Product       @relation(fields: [productId], references: [id])
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id])
}

model Cart {
  id          Int             @id @default(autoincrement())
  cartTotal   Float
  orderedById Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderedBy   User?           @relation("UserCarts", fields: [orderedById], references: [id])
  products    ProductOnCart[]
}

model ProductOnCart {
  id        Int             @id @default(autoincrement())
  cartId    Int
  productId Int
  variantId Int?
  count     Int
  price     Float
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model Review {
  id        Int             @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String
  orderId   Int?
  variantId Int?
  createdAt DateTime        @default(now())
  repliedAt DateTime?
  reply     String?
  replyById Int?
  order     Order?          @relation(fields: [orderId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  replyBy   User?           @relation("ReviewReply", fields: [replyById], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  images    ReviewImage[]
}

model ReviewImage {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  filename  String?
  mime      String
  data      Bytes
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Address {
  id        Int     @id @default(autoincrement())
  address   String
  telephone String
  name      String
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
}

model TrackingSequence {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  counter   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  user
  admin
}

enum OrderStatus {
  NOT_PROCESSED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
